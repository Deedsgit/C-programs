#include <stdio.h>
#include <conio.h>

// C program for insertion of node in linked list
// create a node
struct node
{
    int data;
    struct node *next;
};
// Create functions for static
void create();         // create(node_name,no. of node,i=1)
void show();           // show(node_name)
void insertatbeg();    // insertatbeg(&node_name,value)
void insertatend();    // insertatend(&node_name,value)
void insertatanypos(); // insertatanypos(linkedlist_name,position,value)
// Create funtion for dynamic
void create1();
void insertatbeg1();
void insertatend1();
void insertatanypos1();

int main()
{
    int a;
    printf("1. Dynamic linkedlist\n\n2. Static linkedlist (having 100,500,800 at beginning,postion 3,end)\n");
    printf("\nChoose 1 OR 2: ");
    scanf("%d", &a);
    if (a == 2)
    {
        printf("Enter the value of 5 nodes:\n\n");
        struct node *head = NULL;
        head = (struct node *)malloc(sizeof(struct node));
        create(head, 5, 1);
        insertatbeg(&head, 100);
        insertatend(&head, 800);
        insertatanypos(head, 3, 500);
        show(head);
    }
    if (a == 1)
    {
        struct node *head = NULL;
        head = (struct node *)malloc(sizeof(struct node));
        create1(head, 0, 1);
        insertatbeg1(&head);
        insertatend1(&head);
        insertatanypos1(head);
        show(head);
    }
    getch();
    return 0;
}

void create(struct node *list, int n, int i)
{
    int x;
    printf("Enter value of node %d:", i);
    scanf("%d", &x);
    list->data = x;
    if (n > 1)
    {
        list->next = (struct node *)malloc(sizeof(struct node));
        create(list->next, n - 1, i + 1);
    }
    else
    {
        list->next = NULL;
    }
}
void show(struct node *list)
{
    printf("\nlinked list :\n");
    while (list != NULL)
    {
        printf(" %d--->", list->data);
        list = list->next;
    }
}

// Insert at beginning
void insertatbeg(struct node **head, int x)
{
    struct node *n1 = (struct node *)malloc(sizeof(struct node));
    n1->data = x;
    n1->next = (*head);
    (*head) = n1;
}
// Insert at End
void insertatend(struct node **list, int x)
{
    struct node *node1 = (struct node *)malloc(sizeof(struct node));
    struct node *last = *list;
    node1->data = x;
    while (last->next != NULL)
    {
        last = last->next;
    }
    last->next = node1;
    node1->next = NULL;
}
// Insert at any position
void insertatanypos(struct node *list, int pos, int value)
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = value;
    while (pos > 1)
    {
        list = list->next;
        pos--;
    }
    newnode->next = list->next;
    list->next = newnode;
}

void create1(struct node *list, int n, int i)
{
    int x;
    printf("Enter no. of node to create:");
    scanf("%d", &n);
    printf("\nEnter value of node %d:", i);
    scanf("%d", &x);
    list->data = x;
    if (n > 1)
    {
        list->next = (struct node *)malloc(sizeof(struct node));
        create(list->next, n - 1, i + 1);
    }
    else
    {
        list->next = NULL;
    }
}
// Insert at beginning
void insertatbeg1(struct node **head)
{
    int x;
    printf("Enter value to insert at beginning:");
    scanf("%d", &x);
    struct node *n1 = (struct node *)malloc(sizeof(struct node));
    n1->data = x;
    n1->next = (*head);
    (*head) = n1;
}
// Insert at End
void insertatend1(struct node **list)
{
    int x;
    printf("Enter value to insert at End:");
    scanf("%d", &x);
    struct node *node1 = (struct node *)malloc(sizeof(struct node));
    struct node *last = *list;
    node1->data = x;
    while (last->next != NULL)
    {
        last = last->next;
    }
    last->next = node1;
    node1->next = NULL;
}
// Insert at any position
void insertatanypos1(struct node *list)
{
    int pos, value;
    printf("Enter value and postition to insert :");
    printf("\nEnter value:");
    scanf("%d", &value);
    printf("Enter poition:");
    scanf("%d", &pos);
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = value;
    while (pos > 1)
    {
        list = list->next;
        pos--;
    }
    newnode->next = list->next;
    list->next = newnode;
}
